name: Build Windows EXE and Upload to OneDrive

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows-exe:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        architecture: 'x64'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        Write-Host "✅ 依赖安装成功"
    
    - name: Build EXE with PyInstaller
      run: |
        Write-Host "🔨 开始构建Windows可执行文件..."
        pyinstaller --clean --noconfirm "DHI_Screening_System_v3.3.spec"
        
        $exePath = "dist\DHI_Screening_System_v3.3\DHI_Screening_System_v3.3.exe"
        if (Test-Path $exePath) {
          $fileSize = (Get-Item $exePath).Length / 1MB
          Write-Host "✅ EXE构建成功: $([math]::Round($fileSize, 2)) MB"
        } else {
          Write-Host "❌ EXE构建失败"
          exit 1
        }
    
    - name: Prepare upload package
      run: |
        Write-Host "📦 准备上传包..."
        
        $uploadDir = "upload_package"
        if (Test-Path $uploadDir) {
          Remove-Item -Recurse -Force $uploadDir
        }
        New-Item -ItemType Directory -Path $uploadDir
        
        $distDir = "dist\DHI_Screening_System_v3.3"
        if (Test-Path $distDir) {
          Copy-Item -Path "$distDir\*" -Destination $uploadDir -Recurse
          Write-Host "✅ EXE文件已复制到上传目录"
        }
        
        $docFiles = @("README.md", "LICENSE.txt", "CHANGELOG.md", "whg3r-qi1nv-001.ico")
        foreach ($file in $docFiles) {
          if (Test-Path $file) {
            Copy-Item -Path $file -Destination $uploadDir
            Write-Host "✅ 已复制: $file"
          }
        }
        
        $buildTime = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
        $versionContent = "DHI精准筛查助手 v3.3`n构建时间: $buildTime`n构建分支: $env:GITHUB_REF_NAME`n提交哈希: $env:GITHUB_SHA`n构建号: $env:GITHUB_RUN_NUMBER`n`n系统要求:`n- Windows 7/8/10/11 (32位或64位)`n- 内存: 4GB RAM 推荐`n- 硬盘: 100MB 可用空间`n`n使用说明:`n1. 直接运行 DHI_Screening_System_v3.3.exe`n2. 首次使用请参考 README.md`n3. 如有问题请查看 CHANGELOG.md`n`n技术支持: 伊利液奶奶科院"
        
        $versionContent | Out-File -FilePath "$uploadDir\version_info.txt" -Encoding UTF8
        
        Write-Host "📋 上传包内容:"
        Get-ChildItem $uploadDir | Format-Table Name, Length, LastWriteTime
        
        $totalSize = (Get-ChildItem $uploadDir -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
        Write-Host "📊 上传包总大小: $([math]::Round($totalSize, 2)) MB"
    
    - name: Install rclone
      run: |
        Write-Host "📥 安装rclone..."
        $rcloneUrl = "https://downloads.rclone.org/rclone-current-windows-amd64.zip"
        $rcloneZip = "rclone.zip"
        
        Invoke-WebRequest -Uri $rcloneUrl -OutFile $rcloneZip
        Expand-Archive -Path $rcloneZip -DestinationPath "." -Force
        
        $rcloneExe = Get-ChildItem -Path ".\rclone-*" -Name "rclone.exe" -Recurse | Select-Object -First 1
        if ($rcloneExe) {
          Copy-Item -Path $rcloneExe.FullName -Destination ".\rclone.exe"
          Write-Host "✅ rclone安装成功"
        } else {
          Write-Host "❌ rclone安装失败"
          exit 1
        }
    
    - name: Configure OneDrive and Upload
      env:
        ONEDRIVE_TOKEN: ${{ secrets.ONEDRIVE_TOKEN }}
      run: |
        Write-Host "☁️ 配置OneDrive连接..."
        
        if (-not $env:ONEDRIVE_TOKEN) {
          Write-Host "⚠️ 未配置OneDrive token，跳过上传"
          Write-Host "📝 请在GitHub仓库设置中添加 ONEDRIVE_TOKEN secret"
          exit 0
        }
        
        $rcloneConfig = "[onedrive]`ntype = onedrive`ntoken = $env:ONEDRIVE_TOKEN`ndrive_id = `ndrive_type = personal"
        
        $configDir = "$env:APPDATA\rclone"
        if (-not (Test-Path $configDir)) {
          New-Item -ItemType Directory -Path $configDir -Force
        }
        
        $rcloneConfig | Out-File -FilePath "$configDir\rclone.conf" -Encoding UTF8
        
        $timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'
        $remotePath = "DHI_Screening_System/releases/v3.3_$timestamp"
        
        Write-Host "📤 开始上传到OneDrive: $remotePath"
        
        try {
          .\rclone.exe copy "upload_package" "onedrive:$remotePath" --progress --verbose
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ 上传成功!"
            Write-Host "📂 OneDrive路径: $remotePath"
            
            Write-Host "📋 已上传的文件:"
            .\rclone.exe ls "onedrive:$remotePath"
          } else {
            Write-Host "❌ 上传失败，错误代码: $LASTEXITCODE"
            exit 1
          }
        } catch {
          Write-Host "❌ 上传出错: $_"
          exit 1
        }
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: DHI-EXE-v3.3-${{ github.run_number }}
        path: upload_package/
        retention-days: 30
    
    - name: Create release summary
      if: success()
      run: |
        Write-Host "🎉 构建完成摘要"
        Write-Host "===================="
        Write-Host "📦 版本: v3.3"
        Write-Host "🔨 构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        $timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'
        Write-Host "📂 OneDrive路径: DHI_Screening_System/releases/v3.3_$timestamp"
        Write-Host "💾 备用下载: GitHub Actions Artifacts"
        Write-Host "🖥️ 支持系统: Windows 7/8/10/11 (32位/64位)"
        Write-Host "📋 使用说明: 参考upload_package中的version_info.txt"
