name: Build Windows Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Get version
      id: version
      shell: bash
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Create version info file
      run: |
        @"
        VSVersionInfo(
          ffi=FixedFileInfo(
            filevers=(4, 0, 2, 0),
            prodvers=(4, 0, 2, 0),
            mask=0x3f,
            flags=0x0,
            OS=0x40004,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          ),
          kids=[
            StringFileInfo(
              [
              StringTable(
                u'040904B0',
                [StringStruct(u'CompanyName', u'伊利液奶奶科院'),
                StringStruct(u'FileDescription', u'DHI数据分析与乳房炎监测系统'),
                StringStruct(u'FileVersion', u'4.0.2.0'),
                StringStruct(u'InternalName', u'DHI筛查助手'),
                StringStruct(u'LegalCopyright', u'Copyright (C) 2025 伊利液奶奶科院'),
                StringStruct(u'OriginalFilename', u'DHI筛查助手.exe'),
                StringStruct(u'ProductName', u'DHI筛查助手'),
                StringStruct(u'ProductVersion', u'4.0.2.0')])
              ]), 
            VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
          ]
        )
        "@ | Out-File -FilePath version_info.txt -Encoding UTF8
    
    - name: Build with PyInstaller
      run: |
        Write-Host "🔨 开始构建Windows可执行文件 (OneDIR模式)..."
        Write-Host "📋 使用spec文件构建"
        Write-Host "🚀 OneDIR模式优势: 启动速度快，文件结构清晰"
        
        # 检查文件是否存在
        if (Test-Path "DHI_Screening_System_Windows.spec") {
            Write-Host "✅ 找到Windows专用spec文件"
            pyinstaller DHI_Screening_System_Windows.spec
        } else {
            Write-Host "⚠️ 未找到Windows spec文件，使用命令行参数构建"
            pyinstaller --onedir `
                        --windowed `
                        --name="DHI筛查助手" `
                        --version-file=version_info.txt `
                        --icon=whg3r-qi1nv-001.ico `
                        --add-data="config.yaml;." `
                        --add-data="rules.yaml;." `
                        --add-data="whg3r-qi1nv-001.ico;." `
                        --add-data="README.md;." `
                        --add-data="操作说明.md;." `
                        --add-data="LICENSE.txt;." `
                        --add-data="mastitis_monitoring.py;." `
                        --add-data="data_processor.py;." `
                        --add-data="models.py;." `
                        --add-data="urea_tracker.py;." `
                        --add-data="progress_manager.py;." `
                        --add-data="chart_localization.py;." `
                        --add-data="auth_module;auth_module" `
                        desktop_app.py
        }
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ EXE构建成功！"
            Write-Host "📂 查看dist目录内容："
            Get-ChildItem -Path dist -Recurse -Depth 1 | Format-Table FullName
        } else {
            Write-Host "❌ EXE构建失败"
            exit 1
        }
    
    - name: Create installer with Inno Setup
      run: |
        Write-Host "📦 准备创建Windows安装程序..."
        
        # 下载并安装Inno Setup
        Write-Host "⬇️ 下载Inno Setup..."
        curl -L -o innosetup.exe https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe
        
        Write-Host "📥 安装Inno Setup..."
        Start-Process -FilePath ".\innosetup.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/SP-" -Wait
        
        # 等待安装完成
        Start-Sleep -Seconds 5
        
        # 查找ISCC.exe的实际位置
        $isccPath = ""
        $possiblePaths = @(
            "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
            "C:\Program Files\Inno Setup 6\ISCC.exe",
            "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe",
            "${env:ProgramFiles}\Inno Setup 6\ISCC.exe"
        )
        
        foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
                $isccPath = $path
                Write-Host "✅ 找到ISCC.exe: $isccPath"
                break
            }
        }
        
        if ($isccPath -eq "") {
            Write-Host "❌ 未找到ISCC.exe，尝试搜索..."
            $found = Get-ChildItem -Path "C:\Program Files*" -Filter "ISCC.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) {
                $isccPath = $found.FullName
                Write-Host "✅ 搜索到ISCC.exe: $isccPath"
            } else {
                Write-Host "❌ 无法找到ISCC.exe，跳过安装程序创建"
                exit 0
            }
        }
        
        # 创建installer目录
        New-Item -ItemType Directory -Force -Path installer
        
        # 检查实际的输出目录
        Write-Host "🔍 检查输出目录..."
        $sourceDir = ""
        $targetDir = "dist\DHI_Screening_System"
        
        if (Test-Path "dist\DHI筛查助手") {
            $sourceDir = "dist\DHI筛查助手"
            Write-Host "✅ 找到中文输出目录: $sourceDir"
            
            # 复制到英文路径以避免编码问题
            Write-Host "📁 复制到英文路径..."
            if (Test-Path $targetDir) {
                Remove-Item -Path $targetDir -Recurse -Force
            }
            Copy-Item -Path $sourceDir -Destination $targetDir -Recurse -Force
            Write-Host "✅ 已复制到: $targetDir"
            
            # 重命名exe文件为英文
            $chineseExe = "$targetDir\DHI筛查助手.exe"
            $englishExe = "$targetDir\DHI_Screening_System.exe"
            if (Test-Path $chineseExe) {
                Rename-Item -Path $chineseExe -NewName "DHI_Screening_System.exe" -Force
                Write-Host "✅ 已重命名exe文件"
            }
            
        } elseif (Test-Path "dist\DHI_Screening_System") {
            Write-Host "✅ 已有英文输出目录"
        } else {
            Write-Host "❌ 未找到预期的输出目录"
            Get-ChildItem -Path dist | ForEach-Object { Write-Host "  - $_" }
        }
        
        # 使用固定的英文路径创建安装程序
        if (Test-Path $targetDir) {
            Write-Host "📝 更新ISS文件中的路径..."
            $issContent = Get-Content -Path "DHI_Screening_System_v4.01_Setup.iss" -Raw
            $issContent = $issContent -replace 'Source: "dist\\[^"]*\\', 'Source: "dist\DHI_Screening_System\'
            $issContent | Out-File -FilePath "DHI_Screening_System_v4.01_Setup_temp.iss" -Encoding UTF8
            
            Write-Host "🔨 编译安装程序..."
            & $isccPath "DHI_Screening_System_v4.01_Setup_temp.iss"
        } else {
            Write-Host "⚠️ 跳过安装程序创建"
        }
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ 安装程序创建成功！"
            Get-ChildItem -Path installer -Filter "*.exe" | ForEach-Object { Write-Host "📦 $($_.Name)" }
        } else {
            Write-Host "⚠️ 安装程序创建失败，但继续构建流程"
        }
    
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: DHI筛查助手-Windows-v${{ steps.version.outputs.version }}
        path: dist/DHI筛查助手/
    
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: DHI筛查助手-Windows-Installer-v${{ steps.version.outputs.version }}
        path: installer/*.exe
    
    # Release creation removed due to permission issues
    # Artifacts can be downloaded from Actions page
    
    - name: Build Summary
      if: always()
      run: |
        Write-Host "========================================"
        Write-Host "🎉 DHI筛查助手 Windows 构建总结"
        Write-Host "========================================"
        Write-Host "版本: v${{ steps.version.outputs.version }}"
        Write-Host ""
        
        if (Test-Path "dist\DHI_Screening_System") {
            Write-Host "✅ EXE构建: 成功"
            $exeSize = (Get-ChildItem "dist\DHI_Screening_System" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
            Write-Host "   程序大小: $([Math]::Round($exeSize, 2)) MB"
        } else {
            Write-Host "❌ EXE构建: 失败"
        }
        
        if (Test-Path "installer\*.exe") {
            Write-Host "✅ 安装程序: 成功"
            Get-ChildItem "installer\*.exe" | ForEach-Object {
                $installerSize = $_.Length / 1MB
                Write-Host "   $($_.Name): $([Math]::Round($installerSize, 2)) MB"
            }
        } else {
            Write-Host "⚠️ 安装程序: 未创建"
        }
        
        Write-Host ""
        Write-Host "📥 下载方式:"
        Write-Host "1. 访问 Actions 页面"
        Write-Host "2. 点击此次构建"
        Write-Host "3. 在页面底部下载 Artifacts"
        Write-Host ""
        Write-Host "构建完成！"