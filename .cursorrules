# Cursor AI 项目开发规则

## 通用开发规则

### 1. 版本管理规则 (必须执行)
- **每个重要功能完成后必须创建git版本**
- **版本号格式**: vX.Y (如 v1.0, v1.1, v2.0)
- **必须创建CHANGELOG.md文件记录版本历史**
- **CHANGELOG.md内容要求**:
  - 详细记录每个版本的功能变更
  - 包含Bug修复说明
  - 提供版本回退指南
  - 记录发布日期和提交哈希
  - 包含验证项目清单

### 2. 版本创建流程
```bash
# 1. 提交所有更改
git add .
git commit -m "版本描述"

# 2. 创建版本标签
git tag -a vX.Y -m "版本说明"

# 3. 更新CHANGELOG.md
# 4. 推送到远程 (如需要)
git push origin main --tags
```

### 3. CHANGELOG.md模板结构
```markdown
# 项目名称 - 版本更新日志

## [vX.Y] - YYYY-MM-DD
### 🚀 新功能
### 🐛 Bug修复  
### 🎨 界面优化
### ⚡ 性能优化
### 📚 文档更新

**发布日期**: YYYY-MM-DD
**版本状态**: 稳定版/测试版
**提交哈希**: xxxxxxx

## 版本回退指南
### 如何回退到特定版本
```

## 项目特定规则

### 代码质量
- 中文注释和文档
- 函数和类的详细文档字符串
- 错误处理和日志记录
- 代码复用和模块化

### 测试要求
- 重要功能必须有测试用例
- Bug修复必须包含回归测试
- 性能关键功能需要性能测试

### 文档要求
- README.md必须保持最新
- 重要功能需要操作说明
- API变更需要文档更新

### 部署规则
- 生产版本必须经过充分测试
- 重大变更需要灰度发布
- 保持向后兼容性

## 特殊说明

### Git提交规范
- 使用清晰的提交信息
- 包含变更类型前缀 (feat:, fix:, docs:, style:, refactor:, test:)
- 中文说明具体变更内容

### 分支管理
- main分支为稳定版本
- feature分支用于新功能开发
- hotfix分支用于紧急修复

### 发布规范
- 每个版本都要有完整的发布说明
- 重大版本变更需要迁移指南
- 保持版本号的语义化 