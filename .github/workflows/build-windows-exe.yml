name: Build Windows EXE (Multi-Architecture)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows-exe:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x64, x86]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        architecture: ${{ matrix.architecture }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Create architecture-specific spec file
      run: |
        $arch = "${{ matrix.architecture }}"
        $specContent = Get-Content "DHI_Screening_System_v3.0.spec" -Raw
        $specContent = $specContent -replace "APP_NAME = 'DHI_Screening_System_v3.0'", "APP_NAME = 'DHI_Screening_System_v3.0_$arch'"
        $specContent = $specContent -replace "target_arch=None", "target_arch='$arch'"
        $specContent | Out-File "DHI_Screening_System_v3.0_$arch.spec" -Encoding UTF8
        
    - name: Build EXE with PyInstaller
      run: |
        $arch = "${{ matrix.architecture }}"
        pyinstaller --clean --noconfirm "DHI_Screening_System_v3.0_$arch.spec"
    
    - name: Upload Architecture-specific Build
      uses: actions/upload-artifact@v4
      with:
        name: DHI_Screening_System_v3.0_${{ matrix.architecture }}
        path: dist/DHI_Screening_System_v3.0_${{ matrix.architecture }}/

  create-universal-installer:
    needs: build-windows-exe
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download x64 Build
      uses: actions/download-artifact@v4
      with:
        name: DHI_Screening_System_v3.0_x64
        path: dist/x64/
        
    - name: Download x86 Build  
      uses: actions/download-artifact@v4
      with:
        name: DHI_Screening_System_v3.0_x86
        path: dist/x86/
    
    - name: Install Inno Setup
      run: |
        $url = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
        $output = "innosetup-installer.exe"
        Invoke-WebRequest -Uri $url -OutFile $output
        Start-Process -FilePath $output -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
        $env:PATH += ";C:\Program Files (x86)\Inno Setup 6"
        echo "C:\Program Files (x86)\Inno Setup 6" >> $env:GITHUB_PATH
        
    - name: Create Universal Installer Script
      run: |
        # 创建通用安装脚本
        Write-Host "创建通用安装脚本..."
        
        # 先创建脚本头部
        "; DHI Screening Analysis System v3.0 - Universal Installer" | Out-File "DHI_Universal_Setup.iss" -Encoding UTF8
        "; Supports both x86 and x64 architectures" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "#define MyAppNameChinese `"DHI筛查分析系统`"" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "#define MyAppVersion `"3.0`"" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "#define MyAppPublisher `"Yili Liquid Milk Research Institute`"" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "[Setup]" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "AppId={{B6F5E7D4-8A2C-4F1B-9E3D-7A6C8B9D0E1F}" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "AppName={#MyAppNameChinese}" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "AppVersion={#MyAppVersion}" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "AppVerName={#MyAppNameChinese} v{#MyAppVersion}" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "AppPublisher={#MyAppPublisher}" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "DefaultDirName={autopf}\{#MyAppNameChinese}" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "DefaultGroupName={#MyAppNameChinese}" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "AllowNoIcons=yes" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "LicenseFile=LICENSE.txt" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "OutputDir=installer" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "OutputBaseFilename=DHI_Screening_System_v{#MyAppVersion}_Universal_Setup" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "SetupIconFile=whg3r-qi1nv-001.ico" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Compression=lzma" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "SolidCompression=yes" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "WizardStyle=modern" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "MinVersion=6.1" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "ArchitecturesAllowed=x86 x64" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "ArchitecturesInstallIn64BitMode=x64" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "PrivilegesRequired=admin" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "[Languages]" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Name: `"english`"; MessagesFile: `"compiler:Default.isl`"" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "[Tasks]" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Name: `"desktopicon`"; Description: `"{cm:CreateDesktopIcon}`"; GroupDescription: `"{cm:AdditionalIcons}`"; Flags: unchecked" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "[Files]" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Source: `"dist\x64\*`"; DestDir: `"{app}`"; Flags: ignoreversion recursesubdirs createallsubdirs; Check: Is64BitInstallMode" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Source: `"dist\x86\*`"; DestDir: `"{app}`"; Flags: ignoreversion recursesubdirs createallsubdirs; Check: not Is64BitInstallMode" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Source: `"README.md`"; DestDir: `"{app}`"; Flags: ignoreversion" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Source: `"LICENSE.txt`"; DestDir: `"{app}`"; Flags: ignoreversion" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Source: `"whg3r-qi1nv-001.ico`"; DestDir: `"{app}`"; Flags: ignoreversion" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "[Icons]" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Name: `"{group}\{#MyAppNameChinese}`"; Filename: `"{app}\DHI_Screening_System_v3.0_x64.exe`"; Check: Is64BitInstallMode" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Name: `"{group}\{#MyAppNameChinese}`"; Filename: `"{app}\DHI_Screening_System_v3.0_x86.exe`"; Check: not Is64BitInstallMode" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Name: `"{autodesktop}\{#MyAppNameChinese}`"; Filename: `"{app}\DHI_Screening_System_v3.0_x64.exe`"; Tasks: desktopicon; Check: Is64BitInstallMode" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Name: `"{autodesktop}\{#MyAppNameChinese}`"; Filename: `"{app}\DHI_Screening_System_v3.0_x86.exe`"; Tasks: desktopicon; Check: not Is64BitInstallMode" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "[Run]" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Filename: `"{app}\DHI_Screening_System_v3.0_x64.exe`"; Flags: nowait postinstall skipifsilent; Check: Is64BitInstallMode" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        "Filename: `"{app}\DHI_Screening_System_v3.0_x86.exe`"; Flags: nowait postinstall skipifsilent; Check: not Is64BitInstallMode" | Add-Content "DHI_Universal_Setup.iss" -Encoding UTF8
        
        Write-Host "✅ 通用安装脚本创建完成"
        
    - name: Create Universal Installer
      run: |
        # 创建installer目录
        if (-not (Test-Path "installer")) {
          New-Item -ItemType Directory -Path "installer"
        }
        
        # 编译通用安装脚本
        $isccPath = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
        Write-Host "创建通用安装包..."
        & $isccPath "DHI_Universal_Setup.iss"
        
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ 通用安装包创建成功"
          $installerPath = "installer\DHI_Screening_System_v3.0_Universal_Setup.exe"
          if (Test-Path $installerPath) {
            $fileSize = (Get-Item $installerPath).Length / 1MB
            Write-Host "📦 安装包大小: $([math]::Round($fileSize, 2)) MB"
          }
        } else {
          Write-Host "❌ 通用安装包创建失败"
          exit 1
        }
        
    - name: Create Portable Versions
      run: |
        # 创建便携版本目录
        mkdir -p release/portable_x64
        mkdir -p release/portable_x86
        
        # 复制x64便携版
        xcopy "dist\x64" "release\portable_x64\DHI_Screening_System_v3.0" /E /I
        xcopy "README.md" "release\portable_x64\" /Y
        xcopy "LICENSE.txt" "release\portable_x64\" /Y
        
        # 复制x86便携版  
        xcopy "dist\x86" "release\portable_x86\DHI_Screening_System_v3.0" /E /I
        xcopy "README.md" "release\portable_x86\" /Y
        xcopy "LICENSE.txt" "release\portable_x86\" /Y
        
        # 压缩便携版
        powershell Compress-Archive -Path "release\portable_x64\*" -DestinationPath "DHI_Screening_System_v3.0_Portable_x64.zip"
        powershell Compress-Archive -Path "release\portable_x86\*" -DestinationPath "DHI_Screening_System_v3.0_Portable_x86.zip"
        
    - name: Upload Universal Installer
      uses: actions/upload-artifact@v4
      with:
        name: DHI_Universal_Installer
        path: installer/
        
    - name: Upload Portable x64
      uses: actions/upload-artifact@v4
      with:
        name: DHI_Portable_x64
        path: DHI_Screening_System_v3.0_Portable_x64.zip
        
    - name: Upload Portable x86
      uses: actions/upload-artifact@v4
      with:
        name: DHI_Portable_x86
        path: DHI_Screening_System_v3.0_Portable_x86.zip
        
    - name: Create release info
      run: |
        $content = "# DHI筛查分析系统 v3.0 - 多架构构建`n`n"
        $content += "## 🏢 开发单位`n伊利液奶奶科院`n`n"
        $content += "## 📦 构建产物`n`n"
        $content += "### 1. 通用安装包（推荐）`n"
        $content += "**文件**: DHI_Screening_System_v3.0_Universal_Setup.exe`n"
        $content += "- 🔧 自动检测系统架构（x86/x64）`n"
        $content += "- 📋 支持Windows 7及以上系统`n"
        $content += "- 🎯 智能安装对应架构的程序`n"
        $content += "- ✅ 开始菜单和桌面快捷方式`n"
        $content += "- 🗑️ 完整卸载功能`n`n"
        $content += "### 2. 便携版本`n"
        $content += "**x64版本**: DHI_Screening_System_v3.0_Portable_x64.zip`n"
        $content += "**x86版本**: DHI_Screening_System_v3.0_Portable_x86.zip`n"
        $content += "- 💚 免安装绿色版本`n"
        $content += "- 📂 解压即用`n"
        $content += "- 🔓 无需管理员权限`n`n"
        $content += "## 🖥️ 系统兼容性`n"
        $content += "- **支持系统**: Windows 7, 8, 8.1, 10, 11`n"
        $content += "- **支持架构**: x86 (32位) 和 x64 (64位)`n"
        $content += "- **内存要求**: 最低2GB, 推荐4GB+`n"
        $content += "- **磁盘空间**: 500MB可用空间`n`n"
        $content += "## 🚀 安装说明`n`n"
        $content += "### 通用安装包（推荐）`n"
        $content += "1. 下载 DHI_Screening_System_v3.0_Universal_Setup.exe`n"
        $content += "2. 以管理员身份运行`n"
        $content += "3. 安装程序会自动检测您的系统架构`n"
        $content += "4. 跟随安装向导完成安装`n`n"
        $content += "### 便携版本`n"
        $content += "1. 根据您的系统选择对应的zip文件：`n"
        $content += "   - 64位系统：下载x64版本`n"
        $content += "   - 32位系统：下载x86版本`n"
        $content += "2. 解压到任意目录`n"
        $content += "3. 运行对应的exe文件`n`n"
        $content += "## 🔍 如何确定系统架构`n"
        $content += "- 按Win+R，输入msinfo32，查看'系统类型'`n"
        $content += "- 或右键'此电脑' → 属性 → 查看'系统类型'`n`n"
        $content += "构建时间: $(Get-Date)`n"
        $content += "构建版本: GitHub Actions 多架构自动构建"
        
        $content | Out-File -FilePath "构建说明.txt" -Encoding UTF8
        
    - name: Upload Build Info
      uses: actions/upload-artifact@v4
      with:
        name: Build_Info_Universal
        path: 构建说明.txt 