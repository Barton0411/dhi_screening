name: Build Multi-Architecture Windows Installers

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-multi-arch:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: ['x64', 'x86']
        include:
          - architecture: 'x64'
            python-architecture: 'x64'
            arch-display: '64位'
            inno-arch: 'x64'
            min-version: '6.1'
          - architecture: 'x86'
            python-architecture: 'x86'
            arch-display: '32位'
            inno-arch: 'x86'
            min-version: '6.1'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        architecture: ${{ matrix.python-architecture }}
    
    - name: Install dependencies
      run: |
        Write-Host "�� 安装Python依赖 (${{ matrix.arch-display }})..."
        python -m pip install --upgrade pip setuptools wheel
        pip install pyinstaller
        pip install -r requirements.txt
        Write-Host "✅ 依赖安装成功 (${{ matrix.arch-display }})"
        python --version
    
    - name: Create PyInstaller spec
      run: |
        Write-Host "📝 创建PyInstaller配置 (${{ matrix.arch-display }})..."
        $specContent = @"
# -*- mode: python ; coding: utf-8 -*-
block_cipher = None

a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('static', 'static'),
        ('whg3r-qi1nv-001.ico', '.'),
        ('config.yaml', '.'),
        ('rules.yaml', '.'),
        ('README.md', '.'),
        ('LICENSE.txt', '.'),
        ('CHANGELOG.md', '.'),
    ],
    hiddenimports=[
        'PyQt6.QtCore',
        'PyQt6.QtWidgets', 
        'PyQt6.QtGui',
        'pandas',
        'numpy',
        'openpyxl',
        'xlrd',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='DHI_Screening_System_v3.1_${{ matrix.architecture }}',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch='${{ matrix.inno-arch }}',
    codesign_identity=None,
    entitlements_file=None,
    icon='whg3r-qi1nv-001.ico'
)

coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name='DHI_Screening_System_v3.1_${{ matrix.architecture }}'
)
"@
        $specContent | Out-File "DHI_v3.1_${{ matrix.architecture }}.spec" -Encoding UTF8
        Write-Host "✅ Spec文件创建完成"
    
    - name: Build EXE
      run: |
        Write-Host "🔨 开始构建${{ matrix.arch-display }}可执行文件..."
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        
        pyinstaller --clean --noconfirm "DHI_v3.1_${{ matrix.architecture }}.spec"
        
        $exePath = "dist\DHI_Screening_System_v3.1_${{ matrix.architecture }}\DHI_Screening_System_v3.1_${{ matrix.architecture }}.exe"
        if (Test-Path $exePath) {
          $fileSize = (Get-Item $exePath).Length / 1MB
          Write-Host "✅ ${{ matrix.arch-display }}EXE构建成功: $([math]::Round($fileSize, 2)) MB"
        } else {
          Write-Host "❌ ${{ matrix.arch-display }}EXE构建失败"
          exit 1
        }
    
    - name: Install Inno Setup
      run: |
        Write-Host "📥 安装Inno Setup..."
        $url = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
        $output = "innosetup-installer.exe"
        Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
        Start-Process -FilePath $output -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
        $env:PATH += ";C:\Program Files (x86)\Inno Setup 6"
        echo "C:\Program Files (x86)\Inno Setup 6" >> $env:GITHUB_PATH
        Write-Host "✅ Inno Setup安装成功"
    
    - name: Create Installer Script
      run: |
        Write-Host "📝 创建${{ matrix.arch-display }}安装脚本..."
        $archSettings = if ("${{ matrix.architecture }}" -eq "x64") {
          @"
ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64
"@
        } else {
          "ArchitecturesAllowed=x86 x64"
        }
        
        $issContent = @"
#define MyAppName "DHI精准筛查助手"
#define MyAppVersion "3.1"
#define MyAppPublisher "伊利液奶奶科院"
#define MyAppExeName "DHI_Screening_System_v3.1_${{ matrix.architecture }}.exe"

[Setup]
AppId={{B6F5E7D4-8A2C-4F1B-9E3D-7A6C8B9D0E1${{ matrix.architecture == 'x64' && 'F' || 'E' }}}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} v{#MyAppVersion} (${{ matrix.arch-display }})
AppPublisher={#MyAppPublisher}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputDir=installer
OutputBaseFilename=DHI_Screening_System_v{#MyAppVersion}_${{ matrix.architecture }}_Setup
SetupIconFile=whg3r-qi1nv-001.ico
Compression=lzma2
SolidCompression=yes
WizardStyle=modern
MinVersion=${{ matrix.min-version }}
$archSettings
PrivilegesRequired=admin

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "dist\DHI_Screening_System_v3.1_${{ matrix.architecture }}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "README.md"; DestDir: "{app}"; Flags: ignoreversion
Source: "LICENSE.txt"; DestDir: "{app}"; Flags: ignoreversion skipifsourcedoesntexist
Source: "CHANGELOG.md"; DestDir: "{app}"; Flags: ignoreversion skipifsourcedoesntexist
Source: "whg3r-qi1nv-001.ico"; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\whg3r-qi1nv-001.ico"
Name: "{group}\操作说明"; Filename: "{app}\README.md"
Name: "{group}\版本说明"; Filename: "{app}\CHANGELOG.md"
Name: "{group}\卸载 {#MyAppName}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\whg3r-qi1nv-001.ico"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
"@
        $issContent | Out-File "DHI_Setup_${{ matrix.architecture }}.iss" -Encoding UTF8
        Write-Host "✅ 安装脚本创建完成"
    
    - name: Build Installer
      run: |
        Write-Host "🏗️ 构建${{ matrix.arch-display }}安装包..."
        if (-not (Test-Path "installer")) { New-Item -ItemType Directory -Path "installer" }
        
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "DHI_Setup_${{ matrix.architecture }}.iss"
        
        $installerPath = "installer\DHI_Screening_System_v3.1_${{ matrix.architecture }}_Setup.exe"
        if (Test-Path $installerPath) {
          $installerSize = (Get-Item $installerPath).Length / 1MB
          Write-Host "✅ ${{ matrix.arch-display }}安装包构建成功: $([math]::Round($installerSize, 2)) MB"
        } else {
          Write-Host "❌ 安装包构建失败"
          exit 1
        }
    
    - name: Upload Installer
      uses: actions/upload-artifact@v4
      with:
        name: DHI-Installer-${{ matrix.architecture }}
        path: installer/DHI_Screening_System_v3.1_${{ matrix.architecture }}_Setup.exe
        retention-days: 30

  create-release:
    needs: build-multi-arch
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: DHI精准筛查助手 ${{ github.ref }}
        body: |
          ## 🎉 DHI精准筛查助手新版本发布
          
          ### 📦 下载说明
          - **64位系统**：下载 `DHI_Screening_System_v3.1_x64_Setup.exe`
          - **32位系统**：下载 `DHI_Screening_System_v3.1_x86_Setup.exe`
          
          ### ✨ 主要功能
          - 🔍 DHI数据智能筛选
          - 📊 加权平均计算（蛋白率、乳脂率、乳糖率）
          - 🏥 隐形乳房炎监测
          - 📈 多架构兼容性支持
          
          ### 💻 系统要求
          - Windows 7/8/10/11
          - 64位或32位系统均可
          
          详细更新说明请查看 CHANGELOG.md
        draft: false
        prerelease: false
      id: create_release
    
    - name: Upload x64 Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/DHI-Installer-x64/DHI_Screening_System_v3.1_x64_Setup.exe
        asset_name: DHI_Screening_System_v3.1_x64_Setup.exe
        asset_content_type: application/octet-stream
    
    - name: Upload x86 Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/DHI-Installer-x86/DHI_Screening_System_v3.1_x86_Setup.exe
        asset_name: DHI_Screening_System_v3.1_x86_Setup.exe
        asset_content_type: application/octet-stream
